{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ramad\\\\telugu-wordle-app\\\\src\\\\TeluguWordle.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// Telugu alphabet - basic consonants and vowels\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst teluguConsonants = ['క', 'ఖ', 'గ', 'ఘ', 'ఙ', 'చ', 'ఛ', 'జ', 'ఝ', 'ఞ', 'ట', 'ఠ', 'డ', 'ఢ', 'ణ', 'త', 'థ', 'ద', 'ధ', 'న', 'ప', 'ఫ', 'బ', 'భ', 'మ', 'య', 'ర', 'ల', 'వ', 'శ', 'ష', 'స', 'హ', 'ళ', 'క్ష'];\nconst teluguVowels = ['అ', 'ఆ', 'ఇ', 'ఈ', 'ఉ', 'ఊ', 'ఋ', 'ౠ', 'ఎ', 'ఏ', 'ఐ', 'ఒ', 'ఓ', 'ఔ', 'అం', 'అః'];\n\n// Vowel signs (used to create graphemes)\nconst teluguVowelSigns = ['ా', 'ి', 'ీ', 'ు', 'ూ', 'ృ', 'ౄ', 'ె', 'ే', 'ై', 'ొ', 'ో', 'ౌ', 'ం', 'ః'];\n\n// Dictionary of common Telugu words (would need to be expanded)\nconst teluguWordDictionary = ['అమ్మ',\n// amma (mother)\n'నాన్న',\n// naanna (father)\n'ప్రేమ',\n// prema (love)\n'తెలుగు',\n// telugu\n'భారత',\n// bhaarata (India)\n'దేశము',\n// deshamu (country)\n'పుస్తకం',\n// pustakam (book)\n'ఇల్లు',\n// illu (house)\n'స్నేహం',\n// sneham (friendship)\n'ఆనందం',\n// anandam (happiness)\n'విద్య',\n// vidya (education)\n'మనసు',\n// manasu (mind)\n'నీరు',\n// neeru (water)\n'భోజనం',\n// bhojanam (food)\n'జీవితం',\n// jeevitam (life)\n'ప్రపంచం',\n// prapancham (world)\n'వాయు',\n// vaayu (air)\n'భూమి',\n// bhoomi (earth)\n'నగరం',\n// nagaram (city)\n'గ్రామం' // graamam (village)\n];\n\n// Helper function to get a random word from the dictionary\nconst getRandomWord = () => {\n  const randomIndex = Math.floor(Math.random() * teluguWordDictionary.length);\n  return teluguWordDictionary[randomIndex];\n};\n\n// Helper to split a Telugu word into graphemes (handles complex characters correctly)\nconst splitToGraphemes = word => {\n  // This uses the Intl.Segmenter API for accurate grapheme splitting\n  if ('Intl' in window && 'Segmenter' in Intl) {\n    const segmenter = new Intl.Segmenter('te', {\n      granularity: 'grapheme'\n    });\n    return Array.from(segmenter.segment(word), segment => segment.segment);\n  } else {\n    // Fallback method (not as accurate but better than nothing)\n    return Array.from(word);\n  }\n};\n\n// Define the cell state types\n\n// Define types for our game\n\n// The main component\nconst TeluguWordle = () => {\n  _s();\n  // Game state\n  const [targetWord, setTargetWord] = useState('');\n  const [targetGraphemes, setTargetGraphemes] = useState([]);\n  const [currentAttempt, setCurrentAttempt] = useState(0);\n  const [currentPosition, setCurrentPosition] = useState(0);\n  const [gameBoard, setGameBoard] = useState([]);\n  const [gameStatus, setGameStatus] = useState('playing');\n  const [message, setMessage] = useState('');\n  const [showKeyboard, setShowKeyboard] = useState(true);\n  const [usedLetters, setUsedLetters] = useState({});\n  const [showGraphemeSelection, setShowGraphemeSelection] = useState(false);\n  const [selectedConsonant, setSelectedConsonant] = useState('');\n\n  // Maximum attempts and word length\n  const MAX_ATTEMPTS = 6;\n\n  // Initialize the game\n  useEffect(() => {\n    startNewGame();\n  }, []);\n  const startNewGame = () => {\n    const newTargetWord = getRandomWord();\n    const graphemes = splitToGraphemes(newTargetWord);\n    const wordLength = graphemes.length;\n    console.log('Target word:', newTargetWord);\n    console.log('Graphemes:', graphemes);\n\n    // Initialize the game board\n    const newBoard = Array(MAX_ATTEMPTS).fill(null).map(() => Array(wordLength).fill(null).map(() => ({\n      grapheme: '',\n      state: 'empty'\n    })));\n    setTargetWord(newTargetWord);\n    setTargetGraphemes(graphemes);\n    setGameBoard(newBoard);\n    setCurrentAttempt(0);\n    setCurrentPosition(0);\n    setGameStatus('playing');\n    setMessage('');\n    setUsedLetters({});\n  };\n\n  // Function to handle regular keyboard input\n  const handleKeyInput = grapheme => {\n    if (gameStatus !== 'playing') return;\n\n    // If we're at the end of the word, do nothing\n    if (currentPosition >= targetGraphemes.length) return;\n\n    // Update the board\n    const newBoard = [...gameBoard];\n    newBoard[currentAttempt][currentPosition] = {\n      grapheme,\n      state: 'filled'\n    };\n    setGameBoard(newBoard);\n    setCurrentPosition(currentPosition + 1);\n  };\n\n  // Function to handle grapheme selection\n  const handleGraphemeSelect = consonant => {\n    setSelectedConsonant(consonant);\n    setShowGraphemeSelection(true);\n  };\n\n  // Function to handle vowel sign selection\n  const handleVowelSignSelect = vowelSign => {\n    // Combine the consonant with the vowel sign to create a grapheme\n    const grapheme = selectedConsonant + vowelSign;\n    handleKeyInput(grapheme);\n    setShowGraphemeSelection(false);\n  };\n\n  // Function to handle backspace\n  const handleBackspace = () => {\n    if (gameStatus !== 'playing' || currentPosition === 0) return;\n    const newBoard = [...gameBoard];\n    newBoard[currentAttempt][currentPosition - 1] = {\n      grapheme: '',\n      state: 'empty'\n    };\n    setGameBoard(newBoard);\n    setCurrentPosition(currentPosition - 1);\n  };\n\n  // Function to check the current guess\n  const checkGuess = () => {\n    if (currentPosition !== targetGraphemes.length) {\n      setMessage('పదం పూర్తి చేయండి!'); // \"Complete the word!\"\n      return;\n    }\n    const currentGuess = gameBoard[currentAttempt].map(cell => cell.grapheme).join('');\n    const guessGraphemes = gameBoard[currentAttempt].map(cell => cell.grapheme);\n\n    // Check if word exists in dictionary (this is simplistic, should be expanded)\n    if (!teluguWordDictionary.includes(currentGuess)) {\n      setMessage('చెల్లుబాటు అయ్యే పదం కాదు!'); // \"Not a valid word!\"\n      return;\n    }\n\n    // Check each grapheme and update states\n    const newBoard = [...gameBoard];\n    const newUsedLetters = {\n      ...usedLetters\n    };\n\n    // Create a set to track which positions in the target word have been matched\n    const matchedPositions = new Set();\n\n    // First pass: Find exact matches\n    for (let i = 0; i < guessGraphemes.length; i++) {\n      const grapheme = guessGraphemes[i];\n      if (grapheme === targetGraphemes[i]) {\n        newBoard[currentAttempt][i].state = 'correct';\n        newUsedLetters[grapheme] = 'correct';\n        matchedPositions.add(i); // Mark this position as matched\n      }\n    }\n\n    // Second pass: Find partial matches\n    for (let i = 0; i < guessGraphemes.length; i++) {\n      if (newBoard[currentAttempt][i].state === 'correct') continue;\n      const grapheme = guessGraphemes[i];\n      let partialMatch = false;\n\n      // Check if the current grapheme appears in an unmatched position in the target word\n      for (let j = 0; j < targetGraphemes.length; j++) {\n        if (!matchedPositions.has(j) && targetGraphemes[j] === grapheme) {\n          newBoard[currentAttempt][i].state = 'present';\n          if (newUsedLetters[grapheme] !== 'correct') {\n            newUsedLetters[grapheme] = 'present';\n          }\n          matchedPositions.add(j); // Mark this position as matched now\n          partialMatch = true;\n          break;\n        }\n      }\n\n      // If no match found, mark as absent\n      if (!partialMatch) {\n        newBoard[currentAttempt][i].state = 'absent';\n        if (!newUsedLetters[grapheme]) {\n          newUsedLetters[grapheme] = 'absent';\n        }\n      }\n    }\n    setGameBoard(newBoard);\n    setUsedLetters(newUsedLetters);\n\n    // Check if the player won\n    if (currentGuess === targetWord) {\n      setGameStatus('won');\n      setMessage('అభినందనలు! మీరు గెలిచారు!'); // \"Congratulations! You won!\"\n    } else if (currentAttempt === MAX_ATTEMPTS - 1) {\n      setGameStatus('lost');\n      setMessage(`ఆహ్! సరైన పదం: ${targetWord}`); // \"Ah! The correct word was: [word]\"\n    } else {\n      setCurrentAttempt(currentAttempt + 1);\n      setCurrentPosition(0);\n    }\n  };\n\n  // Render the game board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"telugu-wordle\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0C24\\u0C46\\u0C32\\u0C41\\u0C17\\u0C41 \\u0C35\\u0C30\\u0C4D\\u0C21\\u0C3F\\u0C32\\u0C4D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startNewGame,\n        children: \"\\u0C15\\u0C4A\\u0C24\\u0C4D\\u0C24 \\u0C06\\u0C1F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: gameBoard.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${cell.state}`,\n          children: cell.grapheme\n        }, cellIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), showKeyboard && gameStatus === 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyboard-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u0C05\\u0C1A\\u0C4D\\u0C1A\\u0C41\\u0C32\\u0C41 (Vowels)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"key-row\",\n          children: teluguVowels.map(vowel => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleKeyInput(vowel),\n            className: usedLetters[vowel] || '',\n            children: vowel\n          }, vowel, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyboard-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u0C39\\u0C32\\u0C4D\\u0C32\\u0C41\\u0C32\\u0C41 (Consonants)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"key-grid\",\n          children: teluguConsonants.map(consonant => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleGraphemeSelect(consonant),\n            className: usedLetters[consonant] || '',\n            children: consonant\n          }, consonant, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this), showGraphemeSelection && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grapheme-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u0C17\\u0C41\\u0C23\\u0C3F\\u0C02\\u0C24\\u0C3E\\u0C32\\u0C41 (Vowel Signs)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"vowel-sign-grid\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleKeyInput(selectedConsonant),\n            children: [selectedConsonant, \" (\\u0C39\\u0C32\\u0C4D\\u0C32\\u0C41)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 17\n          }, this), teluguVowelSigns.map((sign, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleVowelSignSelect(sign),\n            children: [selectedConsonant + sign, \" (\", teluguVowels[index + 1], \")\"]\n          }, sign, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowGraphemeSelection(false),\n          children: \"\\u0C30\\u0C26\\u0C4D\\u0C26\\u0C41\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-keys\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackspace,\n          children: \"\\u0C24\\u0C4A\\u0C32\\u0C17\\u0C3F\\u0C02\\u0C1A\\u0C41\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: checkGuess,\n          children: \"\\u0C38\\u0C2E\\u0C30\\u0C4D\\u0C2A\\u0C3F\\u0C02\\u0C1A\\u0C41\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }, this), gameStatus !== 'playing' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startNewGame,\n        children: \"\\u0C2E\\u0C33\\u0C4D\\u0C33\\u0C40 \\u0C06\\u0C21\\u0C02\\u0C21\\u0C3F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(TeluguWordle, \"96Y2lEAoKyziri61HfIbWxXvP60=\");\n_c = TeluguWordle;\nexport default TeluguWordle;\nvar _c;\n$RefreshReg$(_c, \"TeluguWordle\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","teluguConsonants","teluguVowels","teluguVowelSigns","teluguWordDictionary","getRandomWord","randomIndex","Math","floor","random","length","splitToGraphemes","word","window","Intl","segmenter","Segmenter","granularity","Array","from","segment","TeluguWordle","_s","targetWord","setTargetWord","targetGraphemes","setTargetGraphemes","currentAttempt","setCurrentAttempt","currentPosition","setCurrentPosition","gameBoard","setGameBoard","gameStatus","setGameStatus","message","setMessage","showKeyboard","setShowKeyboard","usedLetters","setUsedLetters","showGraphemeSelection","setShowGraphemeSelection","selectedConsonant","setSelectedConsonant","MAX_ATTEMPTS","startNewGame","newTargetWord","graphemes","wordLength","console","log","newBoard","fill","map","grapheme","state","handleKeyInput","handleGraphemeSelect","consonant","handleVowelSignSelect","vowelSign","handleBackspace","checkGuess","currentGuess","cell","join","guessGraphemes","includes","newUsedLetters","matchedPositions","Set","i","add","partialMatch","j","has","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","row","rowIndex","cellIndex","vowel","sign","index","_c","$RefreshReg$"],"sources":["C:/Users/ramad/telugu-wordle-app/src/TeluguWordle.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\n// Telugu alphabet - basic consonants and vowels\r\nconst teluguConsonants = [\r\n  'క', 'ఖ', 'గ', 'ఘ', 'ఙ',\r\n  'చ', 'ఛ', 'జ', 'ఝ', 'ఞ',\r\n  'ట', 'ఠ', 'డ', 'ఢ', 'ణ',\r\n  'త', 'థ', 'ద', 'ధ', 'న',\r\n  'ప', 'ఫ', 'బ', 'భ', 'మ',\r\n  'య', 'ర', 'ల', 'వ', 'శ', \r\n  'ష', 'స', 'హ', 'ళ', 'క్ష'\r\n];\r\n\r\nconst teluguVowels = ['అ', 'ఆ', 'ఇ', 'ఈ', 'ఉ', 'ఊ', 'ఋ', 'ౠ', 'ఎ', 'ఏ', 'ఐ', 'ఒ', 'ఓ', 'ఔ', 'అం', 'అః'];\r\n\r\n// Vowel signs (used to create graphemes)\r\nconst teluguVowelSigns = ['ా', 'ి', 'ీ', 'ు', 'ూ', 'ృ', 'ౄ', 'ె', 'ే', 'ై', 'ొ', 'ో', 'ౌ', 'ం', 'ః'];\r\n\r\n// Dictionary of common Telugu words (would need to be expanded)\r\nconst teluguWordDictionary = [\r\n  'అమ్మ', // amma (mother)\r\n  'నాన్న', // naanna (father)\r\n  'ప్రేమ', // prema (love)\r\n  'తెలుగు', // telugu\r\n  'భారత', // bhaarata (India)\r\n  'దేశము', // deshamu (country)\r\n  'పుస్తకం', // pustakam (book)\r\n  'ఇల్లు', // illu (house)\r\n  'స్నేహం', // sneham (friendship)\r\n  'ఆనందం', // anandam (happiness)\r\n  'విద్య', // vidya (education)\r\n  'మనసు', // manasu (mind)\r\n  'నీరు', // neeru (water)\r\n  'భోజనం', // bhojanam (food)\r\n  'జీవితం', // jeevitam (life)\r\n  'ప్రపంచం', // prapancham (world)\r\n  'వాయు', // vaayu (air)\r\n  'భూమి', // bhoomi (earth)\r\n  'నగరం', // nagaram (city)\r\n  'గ్రామం', // graamam (village)\r\n];\r\n\r\n// Helper function to get a random word from the dictionary\r\nconst getRandomWord = (): string => {\r\n  const randomIndex = Math.floor(Math.random() * teluguWordDictionary.length);\r\n  return teluguWordDictionary[randomIndex];\r\n};\r\n\r\n// Helper to split a Telugu word into graphemes (handles complex characters correctly)\r\nconst splitToGraphemes = (word: string): string[] => {\r\n  // This uses the Intl.Segmenter API for accurate grapheme splitting\r\n  if ('Intl' in window && 'Segmenter' in Intl) {\r\n    const segmenter = new Intl.Segmenter('te', { granularity: 'grapheme' });\r\n    return Array.from(segmenter.segment(word), segment => segment.segment);\r\n  } else {\r\n    // Fallback method (not as accurate but better than nothing)\r\n    return Array.from(word);\r\n  }\r\n};\r\n\r\n// Define the cell state types\r\ntype CellState = 'empty' | 'filled' | 'correct' | 'present' | 'absent';\r\n\r\n// Define types for our game\r\ninterface Cell {\r\n  grapheme: string;\r\n  state: CellState;\r\n}\r\n\r\n// The main component\r\nconst TeluguWordle: React.FC = () => {\r\n  // Game state\r\n  const [targetWord, setTargetWord] = useState<string>('');\r\n  const [targetGraphemes, setTargetGraphemes] = useState<string[]>([]);\r\n  const [currentAttempt, setCurrentAttempt] = useState<number>(0);\r\n  const [currentPosition, setCurrentPosition] = useState<number>(0);\r\n  const [gameBoard, setGameBoard] = useState<Cell[][]>([]);\r\n  const [gameStatus, setGameStatus] = useState<'playing' | 'won' | 'lost'>('playing');\r\n  const [message, setMessage] = useState<string>('');\r\n  const [showKeyboard, setShowKeyboard] = useState<boolean>(true);\r\n  const [usedLetters, setUsedLetters] = useState<Record<string, CellState>>({});\r\n  const [showGraphemeSelection, setShowGraphemeSelection] = useState<boolean>(false);\r\n  const [selectedConsonant, setSelectedConsonant] = useState<string>('');\r\n\r\n  // Maximum attempts and word length\r\n  const MAX_ATTEMPTS = 6;\r\n\r\n  // Initialize the game\r\n  useEffect(() => {\r\n    startNewGame();\r\n  }, []);\r\n\r\n  const startNewGame = () => {\r\n    const newTargetWord = getRandomWord();\r\n    const graphemes = splitToGraphemes(newTargetWord);\r\n    const wordLength = graphemes.length;\r\n    \r\n    console.log('Target word:', newTargetWord);\r\n    console.log('Graphemes:', graphemes);\r\n    \r\n    // Initialize the game board\r\n    const newBoard: Cell[][] = Array(MAX_ATTEMPTS).fill(null).map(() => \r\n      Array(wordLength).fill(null).map(() => ({ grapheme: '', state: 'empty' }))\r\n    );\r\n    \r\n    setTargetWord(newTargetWord);\r\n    setTargetGraphemes(graphemes);\r\n    setGameBoard(newBoard);\r\n    setCurrentAttempt(0);\r\n    setCurrentPosition(0);\r\n    setGameStatus('playing');\r\n    setMessage('');\r\n    setUsedLetters({});\r\n  };\r\n\r\n  // Function to handle regular keyboard input\r\n  const handleKeyInput = (grapheme: string) => {\r\n    if (gameStatus !== 'playing') return;\r\n    \r\n    // If we're at the end of the word, do nothing\r\n    if (currentPosition >= targetGraphemes.length) return;\r\n    \r\n    // Update the board\r\n    const newBoard = [...gameBoard];\r\n    newBoard[currentAttempt][currentPosition] = {\r\n      grapheme,\r\n      state: 'filled'\r\n    };\r\n    \r\n    setGameBoard(newBoard);\r\n    setCurrentPosition(currentPosition + 1);\r\n  };\r\n\r\n  // Function to handle grapheme selection\r\n  const handleGraphemeSelect = (consonant: string) => {\r\n    setSelectedConsonant(consonant);\r\n    setShowGraphemeSelection(true);\r\n  };\r\n\r\n  // Function to handle vowel sign selection\r\n  const handleVowelSignSelect = (vowelSign: string) => {\r\n    // Combine the consonant with the vowel sign to create a grapheme\r\n    const grapheme = selectedConsonant + vowelSign;\r\n    handleKeyInput(grapheme);\r\n    setShowGraphemeSelection(false);\r\n  };\r\n\r\n  // Function to handle backspace\r\n  const handleBackspace = () => {\r\n    if (gameStatus !== 'playing' || currentPosition === 0) return;\r\n    \r\n    const newBoard = [...gameBoard];\r\n    newBoard[currentAttempt][currentPosition - 1] = {\r\n      grapheme: '',\r\n      state: 'empty'\r\n    };\r\n    \r\n    setGameBoard(newBoard);\r\n    setCurrentPosition(currentPosition - 1);\r\n  };\r\n\r\n  // Function to check the current guess\r\n  const checkGuess = () => {\r\n    if (currentPosition !== targetGraphemes.length) {\r\n      setMessage('పదం పూర్తి చేయండి!'); // \"Complete the word!\"\r\n      return;\r\n    }\r\n    \r\n    const currentGuess = gameBoard[currentAttempt].map(cell => cell.grapheme).join('');\r\n    const guessGraphemes = gameBoard[currentAttempt].map(cell => cell.grapheme);\r\n    \r\n    // Check if word exists in dictionary (this is simplistic, should be expanded)\r\n    if (!teluguWordDictionary.includes(currentGuess)) {\r\n      setMessage('చెల్లుబాటు అయ్యే పదం కాదు!'); // \"Not a valid word!\"\r\n      return;\r\n    }\r\n    \r\n    // Check each grapheme and update states\r\n    const newBoard = [...gameBoard];\r\n    const newUsedLetters = { ...usedLetters };\r\n    \r\n    // Create a set to track which positions in the target word have been matched\r\n    const matchedPositions = new Set<number>();\r\n    \r\n    // First pass: Find exact matches\r\n    for (let i = 0; i < guessGraphemes.length; i++) {\r\n      const grapheme = guessGraphemes[i];\r\n      \r\n      if (grapheme === targetGraphemes[i]) {\r\n        newBoard[currentAttempt][i].state = 'correct';\r\n        newUsedLetters[grapheme] = 'correct';\r\n        matchedPositions.add(i); // Mark this position as matched\r\n      }\r\n    }\r\n    \r\n    // Second pass: Find partial matches\r\n    for (let i = 0; i < guessGraphemes.length; i++) {\r\n      if (newBoard[currentAttempt][i].state === 'correct') continue;\r\n      \r\n      const grapheme = guessGraphemes[i];\r\n      let partialMatch = false;\r\n      \r\n      // Check if the current grapheme appears in an unmatched position in the target word\r\n      for (let j = 0; j < targetGraphemes.length; j++) {\r\n        if (!matchedPositions.has(j) && targetGraphemes[j] === grapheme) {\r\n          newBoard[currentAttempt][i].state = 'present';\r\n          if (newUsedLetters[grapheme] !== 'correct') {\r\n            newUsedLetters[grapheme] = 'present';\r\n          }\r\n          matchedPositions.add(j); // Mark this position as matched now\r\n          partialMatch = true;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      // If no match found, mark as absent\r\n      if (!partialMatch) {\r\n        newBoard[currentAttempt][i].state = 'absent';\r\n        if (!newUsedLetters[grapheme]) {\r\n          newUsedLetters[grapheme] = 'absent';\r\n        }\r\n      }\r\n    }\r\n    \r\n    setGameBoard(newBoard);\r\n    setUsedLetters(newUsedLetters);\r\n    \r\n    // Check if the player won\r\n    if (currentGuess === targetWord) {\r\n      setGameStatus('won');\r\n      setMessage('అభినందనలు! మీరు గెలిచారు!'); // \"Congratulations! You won!\"\r\n    } else if (currentAttempt === MAX_ATTEMPTS - 1) {\r\n      setGameStatus('lost');\r\n      setMessage(`ఆహ్! సరైన పదం: ${targetWord}`); // \"Ah! The correct word was: [word]\"\r\n    } else {\r\n      setCurrentAttempt(currentAttempt + 1);\r\n      setCurrentPosition(0);\r\n    }\r\n  };\r\n\r\n  // Render the game board\r\n  return (\r\n    <div className=\"telugu-wordle\">\r\n      <header>\r\n        <h1>తెలుగు వర్డిల్</h1> {/* Telugu Wordle */}\r\n        <button onClick={startNewGame}>కొత్త ఆట</button> {/* New Game */}\r\n      </header>\r\n      \r\n      {message && <div className=\"message\">{message}</div>}\r\n      \r\n      <div className=\"game-board\">\r\n        {gameBoard.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"row\">\r\n            {row.map((cell, cellIndex) => (\r\n              <div\r\n                key={cellIndex}\r\n                className={`cell ${cell.state}`}\r\n              >\r\n                {cell.grapheme}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      {showKeyboard && gameStatus === 'playing' && (\r\n        <div className=\"keyboard\">\r\n          <div className=\"keyboard-section\">\r\n            <h3>అచ్చులు (Vowels)</h3>\r\n            <div className=\"key-row\">\r\n              {teluguVowels.map(vowel => (\r\n                <button \r\n                  key={vowel} \r\n                  onClick={() => handleKeyInput(vowel)}\r\n                  className={usedLetters[vowel] || ''}\r\n                >\r\n                  {vowel}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"keyboard-section\">\r\n            <h3>హల్లులు (Consonants)</h3>\r\n            <div className=\"key-grid\">\r\n              {teluguConsonants.map(consonant => (\r\n                <button \r\n                  key={consonant} \r\n                  onClick={() => handleGraphemeSelect(consonant)}\r\n                  className={usedLetters[consonant] || ''}\r\n                >\r\n                  {consonant}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n          \r\n          {showGraphemeSelection && (\r\n            <div className=\"grapheme-selection\">\r\n              <h3>గుణింతాలు (Vowel Signs)</h3>\r\n              <div className=\"vowel-sign-grid\">\r\n                <button onClick={() => handleKeyInput(selectedConsonant)}>\r\n                  {selectedConsonant} (హల్లు)\r\n                </button>\r\n                {teluguVowelSigns.map((sign, index) => (\r\n                  <button \r\n                    key={sign} \r\n                    onClick={() => handleVowelSignSelect(sign)}\r\n                  >\r\n                    {selectedConsonant + sign} ({teluguVowels[index + 1]})\r\n                  </button>\r\n                ))}\r\n              </div>\r\n              <button onClick={() => setShowGraphemeSelection(false)}>రద్దు</button> {/* Cancel */}\r\n            </div>\r\n          )}\r\n          \r\n          <div className=\"control-keys\">\r\n            <button onClick={handleBackspace}>తొలగించు</button> {/* Backspace */}\r\n            <button onClick={checkGuess}>సమర్పించు</button> {/* Submit */}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {gameStatus !== 'playing' && (\r\n        <div className=\"game-over\">\r\n          <p>{message}</p>\r\n          <button onClick={startNewGame}>మళ్ళీ ఆడండి</button> {/* Play Again */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TeluguWordle;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,gBAAgB,GAAG,CACvB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACvB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACvB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACvB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACvB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACvB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACvB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAC1B;AAED,MAAMC,YAAY,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;;AAEvG;AACA,MAAMC,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;;AAEpG;AACA,MAAMC,oBAAoB,GAAG,CAC3B,MAAM;AAAE;AACR,OAAO;AAAE;AACT,OAAO;AAAE;AACT,QAAQ;AAAE;AACV,MAAM;AAAE;AACR,OAAO;AAAE;AACT,SAAS;AAAE;AACX,OAAO;AAAE;AACT,QAAQ;AAAE;AACV,OAAO;AAAE;AACT,OAAO;AAAE;AACT,MAAM;AAAE;AACR,MAAM;AAAE;AACR,OAAO;AAAE;AACT,QAAQ;AAAE;AACV,SAAS;AAAE;AACX,MAAM;AAAE;AACR,MAAM;AAAE;AACR,MAAM;AAAE;AACR,QAAQ,CAAE;AAAA,CACX;;AAED;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAc;EAClC,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,oBAAoB,CAACM,MAAM,CAAC;EAC3E,OAAON,oBAAoB,CAACE,WAAW,CAAC;AAC1C,CAAC;;AAED;AACA,MAAMK,gBAAgB,GAAIC,IAAY,IAAe;EACnD;EACA,IAAI,MAAM,IAAIC,MAAM,IAAI,WAAW,IAAIC,IAAI,EAAE;IAC3C,MAAMC,SAAS,GAAG,IAAID,IAAI,CAACE,SAAS,CAAC,IAAI,EAAE;MAAEC,WAAW,EAAE;IAAW,CAAC,CAAC;IACvE,OAAOC,KAAK,CAACC,IAAI,CAACJ,SAAS,CAACK,OAAO,CAACR,IAAI,CAAC,EAAEQ,OAAO,IAAIA,OAAO,CAACA,OAAO,CAAC;EACxE,CAAC,MAAM;IACL;IACA,OAAOF,KAAK,CAACC,IAAI,CAACP,IAAI,CAAC;EACzB;AACF,CAAC;;AAED;;AAGA;;AAMA;AACA,MAAMS,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAS,EAAE,CAAC;EACxD,MAAM,CAAC4B,eAAe,EAAEC,kBAAkB,CAAC,GAAG7B,QAAQ,CAAW,EAAE,CAAC;EACpE,MAAM,CAAC8B,cAAc,EAAEC,iBAAiB,CAAC,GAAG/B,QAAQ,CAAS,CAAC,CAAC;EAC/D,MAAM,CAACgC,eAAe,EAAEC,kBAAkB,CAAC,GAAGjC,QAAQ,CAAS,CAAC,CAAC;EACjE,MAAM,CAACkC,SAAS,EAAEC,YAAY,CAAC,GAAGnC,QAAQ,CAAW,EAAE,CAAC;EACxD,MAAM,CAACoC,UAAU,EAAEC,aAAa,CAAC,GAAGrC,QAAQ,CAA6B,SAAS,CAAC;EACnF,MAAM,CAACsC,OAAO,EAAEC,UAAU,CAAC,GAAGvC,QAAQ,CAAS,EAAE,CAAC;EAClD,MAAM,CAACwC,YAAY,EAAEC,eAAe,CAAC,GAAGzC,QAAQ,CAAU,IAAI,CAAC;EAC/D,MAAM,CAAC0C,WAAW,EAAEC,cAAc,CAAC,GAAG3C,QAAQ,CAA4B,CAAC,CAAC,CAAC;EAC7E,MAAM,CAAC4C,qBAAqB,EAAEC,wBAAwB,CAAC,GAAG7C,QAAQ,CAAU,KAAK,CAAC;EAClF,MAAM,CAAC8C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG/C,QAAQ,CAAS,EAAE,CAAC;;EAEtE;EACA,MAAMgD,YAAY,GAAG,CAAC;;EAEtB;EACA/C,SAAS,CAAC,MAAM;IACdgD,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,aAAa,GAAG1C,aAAa,CAAC,CAAC;IACrC,MAAM2C,SAAS,GAAGrC,gBAAgB,CAACoC,aAAa,CAAC;IACjD,MAAME,UAAU,GAAGD,SAAS,CAACtC,MAAM;IAEnCwC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEJ,aAAa,CAAC;IAC1CG,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,SAAS,CAAC;;IAEpC;IACA,MAAMI,QAAkB,GAAGlC,KAAK,CAAC2B,YAAY,CAAC,CAACQ,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,MAC5DpC,KAAK,CAAC+B,UAAU,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,OAAO;MAAEC,QAAQ,EAAE,EAAE;MAAEC,KAAK,EAAE;IAAQ,CAAC,CAAC,CAC3E,CAAC;IAEDhC,aAAa,CAACuB,aAAa,CAAC;IAC5BrB,kBAAkB,CAACsB,SAAS,CAAC;IAC7BhB,YAAY,CAACoB,QAAQ,CAAC;IACtBxB,iBAAiB,CAAC,CAAC,CAAC;IACpBE,kBAAkB,CAAC,CAAC,CAAC;IACrBI,aAAa,CAAC,SAAS,CAAC;IACxBE,UAAU,CAAC,EAAE,CAAC;IACdI,cAAc,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC;;EAED;EACA,MAAMiB,cAAc,GAAIF,QAAgB,IAAK;IAC3C,IAAItB,UAAU,KAAK,SAAS,EAAE;;IAE9B;IACA,IAAIJ,eAAe,IAAIJ,eAAe,CAACf,MAAM,EAAE;;IAE/C;IACA,MAAM0C,QAAQ,GAAG,CAAC,GAAGrB,SAAS,CAAC;IAC/BqB,QAAQ,CAACzB,cAAc,CAAC,CAACE,eAAe,CAAC,GAAG;MAC1C0B,QAAQ;MACRC,KAAK,EAAE;IACT,CAAC;IAEDxB,YAAY,CAACoB,QAAQ,CAAC;IACtBtB,kBAAkB,CAACD,eAAe,GAAG,CAAC,CAAC;EACzC,CAAC;;EAED;EACA,MAAM6B,oBAAoB,GAAIC,SAAiB,IAAK;IAClDf,oBAAoB,CAACe,SAAS,CAAC;IAC/BjB,wBAAwB,CAAC,IAAI,CAAC;EAChC,CAAC;;EAED;EACA,MAAMkB,qBAAqB,GAAIC,SAAiB,IAAK;IACnD;IACA,MAAMN,QAAQ,GAAGZ,iBAAiB,GAAGkB,SAAS;IAC9CJ,cAAc,CAACF,QAAQ,CAAC;IACxBb,wBAAwB,CAAC,KAAK,CAAC;EACjC,CAAC;;EAED;EACA,MAAMoB,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI7B,UAAU,KAAK,SAAS,IAAIJ,eAAe,KAAK,CAAC,EAAE;IAEvD,MAAMuB,QAAQ,GAAG,CAAC,GAAGrB,SAAS,CAAC;IAC/BqB,QAAQ,CAACzB,cAAc,CAAC,CAACE,eAAe,GAAG,CAAC,CAAC,GAAG;MAC9C0B,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;IACT,CAAC;IAEDxB,YAAY,CAACoB,QAAQ,CAAC;IACtBtB,kBAAkB,CAACD,eAAe,GAAG,CAAC,CAAC;EACzC,CAAC;;EAED;EACA,MAAMkC,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIlC,eAAe,KAAKJ,eAAe,CAACf,MAAM,EAAE;MAC9C0B,UAAU,CAAC,oBAAoB,CAAC,CAAC,CAAC;MAClC;IACF;IAEA,MAAM4B,YAAY,GAAGjC,SAAS,CAACJ,cAAc,CAAC,CAAC2B,GAAG,CAACW,IAAI,IAAIA,IAAI,CAACV,QAAQ,CAAC,CAACW,IAAI,CAAC,EAAE,CAAC;IAClF,MAAMC,cAAc,GAAGpC,SAAS,CAACJ,cAAc,CAAC,CAAC2B,GAAG,CAACW,IAAI,IAAIA,IAAI,CAACV,QAAQ,CAAC;;IAE3E;IACA,IAAI,CAACnD,oBAAoB,CAACgE,QAAQ,CAACJ,YAAY,CAAC,EAAE;MAChD5B,UAAU,CAAC,4BAA4B,CAAC,CAAC,CAAC;MAC1C;IACF;;IAEA;IACA,MAAMgB,QAAQ,GAAG,CAAC,GAAGrB,SAAS,CAAC;IAC/B,MAAMsC,cAAc,GAAG;MAAE,GAAG9B;IAAY,CAAC;;IAEzC;IACA,MAAM+B,gBAAgB,GAAG,IAAIC,GAAG,CAAS,CAAC;;IAE1C;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,CAACzD,MAAM,EAAE8D,CAAC,EAAE,EAAE;MAC9C,MAAMjB,QAAQ,GAAGY,cAAc,CAACK,CAAC,CAAC;MAElC,IAAIjB,QAAQ,KAAK9B,eAAe,CAAC+C,CAAC,CAAC,EAAE;QACnCpB,QAAQ,CAACzB,cAAc,CAAC,CAAC6C,CAAC,CAAC,CAAChB,KAAK,GAAG,SAAS;QAC7Ca,cAAc,CAACd,QAAQ,CAAC,GAAG,SAAS;QACpCe,gBAAgB,CAACG,GAAG,CAACD,CAAC,CAAC,CAAC,CAAC;MAC3B;IACF;;IAEA;IACA,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,CAACzD,MAAM,EAAE8D,CAAC,EAAE,EAAE;MAC9C,IAAIpB,QAAQ,CAACzB,cAAc,CAAC,CAAC6C,CAAC,CAAC,CAAChB,KAAK,KAAK,SAAS,EAAE;MAErD,MAAMD,QAAQ,GAAGY,cAAc,CAACK,CAAC,CAAC;MAClC,IAAIE,YAAY,GAAG,KAAK;;MAExB;MACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlD,eAAe,CAACf,MAAM,EAAEiE,CAAC,EAAE,EAAE;QAC/C,IAAI,CAACL,gBAAgB,CAACM,GAAG,CAACD,CAAC,CAAC,IAAIlD,eAAe,CAACkD,CAAC,CAAC,KAAKpB,QAAQ,EAAE;UAC/DH,QAAQ,CAACzB,cAAc,CAAC,CAAC6C,CAAC,CAAC,CAAChB,KAAK,GAAG,SAAS;UAC7C,IAAIa,cAAc,CAACd,QAAQ,CAAC,KAAK,SAAS,EAAE;YAC1Cc,cAAc,CAACd,QAAQ,CAAC,GAAG,SAAS;UACtC;UACAe,gBAAgB,CAACG,GAAG,CAACE,CAAC,CAAC,CAAC,CAAC;UACzBD,YAAY,GAAG,IAAI;UACnB;QACF;MACF;;MAEA;MACA,IAAI,CAACA,YAAY,EAAE;QACjBtB,QAAQ,CAACzB,cAAc,CAAC,CAAC6C,CAAC,CAAC,CAAChB,KAAK,GAAG,QAAQ;QAC5C,IAAI,CAACa,cAAc,CAACd,QAAQ,CAAC,EAAE;UAC7Bc,cAAc,CAACd,QAAQ,CAAC,GAAG,QAAQ;QACrC;MACF;IACF;IAEAvB,YAAY,CAACoB,QAAQ,CAAC;IACtBZ,cAAc,CAAC6B,cAAc,CAAC;;IAE9B;IACA,IAAIL,YAAY,KAAKzC,UAAU,EAAE;MAC/BW,aAAa,CAAC,KAAK,CAAC;MACpBE,UAAU,CAAC,2BAA2B,CAAC,CAAC,CAAC;IAC3C,CAAC,MAAM,IAAIT,cAAc,KAAKkB,YAAY,GAAG,CAAC,EAAE;MAC9CX,aAAa,CAAC,MAAM,CAAC;MACrBE,UAAU,CAAC,kBAAkBb,UAAU,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,MAAM;MACLK,iBAAiB,CAACD,cAAc,GAAG,CAAC,CAAC;MACrCG,kBAAkB,CAAC,CAAC,CAAC;IACvB;EACF,CAAC;;EAED;EACA,oBACE9B,OAAA;IAAK6E,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5B9E,OAAA;MAAA8E,QAAA,gBACE9E,OAAA;QAAA8E,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,KAAC,eACxBlF,OAAA;QAAQmF,OAAO,EAAErC,YAAa;QAAAgC,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,EAER/C,OAAO,iBAAInC,OAAA;MAAK6E,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAE3C;IAAO;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAEpDlF,OAAA;MAAK6E,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxB/C,SAAS,CAACuB,GAAG,CAAC,CAAC8B,GAAG,EAAEC,QAAQ,kBAC3BrF,OAAA;QAAoB6E,SAAS,EAAC,KAAK;QAAAC,QAAA,EAChCM,GAAG,CAAC9B,GAAG,CAAC,CAACW,IAAI,EAAEqB,SAAS,kBACvBtF,OAAA;UAEE6E,SAAS,EAAE,QAAQZ,IAAI,CAACT,KAAK,EAAG;UAAAsB,QAAA,EAE/Bb,IAAI,CAACV;QAAQ,GAHT+B,SAAS;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIX,CACN;MAAC,GARMG,QAAQ;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASb,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAEL7C,YAAY,IAAIJ,UAAU,KAAK,SAAS,iBACvCjC,OAAA;MAAK6E,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvB9E,OAAA;QAAK6E,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/B9E,OAAA;UAAA8E,QAAA,EAAI;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzBlF,OAAA;UAAK6E,SAAS,EAAC,SAAS;UAAAC,QAAA,EACrB5E,YAAY,CAACoD,GAAG,CAACiC,KAAK,iBACrBvF,OAAA;YAEEmF,OAAO,EAAEA,CAAA,KAAM1B,cAAc,CAAC8B,KAAK,CAAE;YACrCV,SAAS,EAAEtC,WAAW,CAACgD,KAAK,CAAC,IAAI,EAAG;YAAAT,QAAA,EAEnCS;UAAK,GAJDA,KAAK;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKJ,CACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENlF,OAAA;QAAK6E,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/B9E,OAAA;UAAA8E,QAAA,EAAI;QAAoB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7BlF,OAAA;UAAK6E,SAAS,EAAC,UAAU;UAAAC,QAAA,EACtB7E,gBAAgB,CAACqD,GAAG,CAACK,SAAS,iBAC7B3D,OAAA;YAEEmF,OAAO,EAAEA,CAAA,KAAMzB,oBAAoB,CAACC,SAAS,CAAE;YAC/CkB,SAAS,EAAEtC,WAAW,CAACoB,SAAS,CAAC,IAAI,EAAG;YAAAmB,QAAA,EAEvCnB;UAAS,GAJLA,SAAS;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKR,CACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAELzC,qBAAqB,iBACpBzC,OAAA;QAAK6E,SAAS,EAAC,oBAAoB;QAAAC,QAAA,gBACjC9E,OAAA;UAAA8E,QAAA,EAAI;QAAuB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChClF,OAAA;UAAK6E,SAAS,EAAC,iBAAiB;UAAAC,QAAA,gBAC9B9E,OAAA;YAAQmF,OAAO,EAAEA,CAAA,KAAM1B,cAAc,CAACd,iBAAiB,CAAE;YAAAmC,QAAA,GACtDnC,iBAAiB,EAAC,mCACrB;UAAA;YAAAoC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,EACR/E,gBAAgB,CAACmD,GAAG,CAAC,CAACkC,IAAI,EAAEC,KAAK,kBAChCzF,OAAA;YAEEmF,OAAO,EAAEA,CAAA,KAAMvB,qBAAqB,CAAC4B,IAAI,CAAE;YAAAV,QAAA,GAE1CnC,iBAAiB,GAAG6C,IAAI,EAAC,IAAE,EAACtF,YAAY,CAACuF,KAAK,GAAG,CAAC,CAAC,EAAC,GACvD;UAAA,GAJOD,IAAI;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIH,CACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNlF,OAAA;UAAQmF,OAAO,EAAEA,CAAA,KAAMzC,wBAAwB,CAAC,KAAK,CAAE;UAAAoC,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpE,CACN,eAEDlF,OAAA;QAAK6E,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3B9E,OAAA;UAAQmF,OAAO,EAAErB,eAAgB;UAAAgB,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,eACpDlF,OAAA;UAAQmF,OAAO,EAAEpB,UAAW;UAAAe,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,EAEAjD,UAAU,KAAK,SAAS,iBACvBjC,OAAA;MAAK6E,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxB9E,OAAA;QAAA8E,QAAA,EAAI3C;MAAO;QAAA4C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChBlF,OAAA;QAAQmF,OAAO,EAAErC,YAAa;QAAAgC,QAAA,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC5D,EAAA,CAtQID,YAAsB;AAAAqE,EAAA,GAAtBrE,YAAsB;AAwQ5B,eAAeA,YAAY;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}